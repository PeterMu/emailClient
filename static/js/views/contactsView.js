// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var $, Backbone, Contact, Mustache, contactItem;
    $ = require('jquery');
    Mustache = require('mustache');
    Backbone = require('backbone');
    Contact = require('../models/contact');
    contactItem = Backbone.View.extend({
      events: {
        'click': 'loadDialog'
      },
      template: function() {
        return Mustache.render($('#contact-item-tpl').text(), this.model.toJSON());
      },
      render: function() {
        this.$el.html(this.template());
        return this;
      },
      loadDialog: function() {
        this.$el.parent().find('li').removeClass('highlight');
        this.$('li').addClass('highlight');
        return this.model.collection.trigger('loadDialog', this.model.get('email'));
      }
    });
    return module.exports = Backbone.View.extend({
      el: $('#email-contacts-list'),
      tagName: 'ul',
      initialize: function() {
        var that;
        this.computeHeight();
        that = this;
        this.collection = new Contact.collection;
        this.collection.fetch({
          reset: true
        });
        this.collection.on('reset', this.renderAll, this);
        this.collection.on('add', this.preRenderOne, this);
        this.$el.parent().find('.contacts-search input').keyup(function() {
          return that.search.call(that);
        });
        return setInterval(function() {
          return that.getUnseen(that);
        }, 1000 * 20);
      },
      renderOne: function(data) {
        if (data.get('haveUnseen') === true) {
          this.preRenderOne(data);
        } else {
          this.$el.append(new contactItem({
            model: data
          }).render().el);
        }
        return this;
      },
      preRenderOne: function(data) {
        this.$el.prepend(new contactItem({
          model: data
        }).render().el);
        return this;
      },
      renderAll: function() {
        this.$el.children().remove();
        return this.collection.each(this.renderOne, this);
      },
      computeHeight: function() {
        var height, that;
        height = $(window).outerHeight() - this.$el.parent().find('.contacts-search').outerHeight();
        this.$el.height(height);
        that = this;
        return $(window).resize(function() {
          height = $(window).outerHeight() - that.$el.parent().find('.contacts-search').outerHeight();
          return that.$el.height(height);
        });
      },
      search: function() {
        var e, results, value;
        e = window.event || arguments[0];
        value = $(e.target || e.srcElement).val().toUpperCase();
        if (value === '') {
          results = this.collection.where({
            show: false
          });
          results.forEach(function(ele) {
            return ele.set({
              show: true
            });
          });
        } else {
          this.collection.forEach(function(ele) {
            if (ele.get('name').toUpperCase().indexOf(value) === -1) {
              return ele.set({
                show: false,
                silent: true
              });
            } else {
              return ele.set({
                show: true,
                silent: true
              });
            }
          });
        }
        return this.renderAll();
      },
      getUnseen: function(that) {
        return $.get('/unseen', function(mails) {
          var from;
          from = '';
          mails.forEach(function(mail) {
            return from += mail.from[0].address;
          });
          that.collection.forEach(function(value) {
            if (from.indexOf(value.get('email')) > 0) {
              return value.set({
                haveUnseen: true
              });
            }
          });
          return that.renderAll();
        });
      }
    });
  });

}).call(this);
